{
	"info": {
		"_postman_id": "b2cbe340-5dfd-4c2f-b218-2d93976974bb",
		"name": "Bookstore.Api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "45378601",
		"_collection_link": "https://davidboskovic.postman.co/workspace/David-Boskovic's-Workspace~0d754e17-55ef-4b45-88c6-048feff3aa76/collection/45378601-b2cbe340-5dfd-4c2f-b218-2d93976974bb?action=share&source=collection_link&creator=45378601"
	},
	"item": [
		{
			"name": "login",
			"item": [
				{
					"name": "/login Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has token\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.token).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.environment.set(\"jwt_token\", jsonData.token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"admin\",\r\n  \"password\": \"password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login?username=admin&password=password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "admin",
									"description": "(Required) "
								},
								{
									"key": "password",
									"value": "password",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/login?username=ea ut ipsum amet officia&password=ea ut ipsum amet officia",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "ea ut ipsum amet officia",
											"description": "(Required) "
										},
										{
											"key": "password",
											"value": "ea ut ipsum amet officia",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "/login Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Response body is empty\", () => {\r",
									"    pm.expect(pm.response.text()).to.eql(\"\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"admin\",\r\n  \"password\": \"pogresnaLozinka\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login?username=ea ut ipsum amet officia&password=ea ut ipsum amet officia",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "ea ut ipsum amet officia",
									"description": "(Required) "
								},
								{
									"key": "password",
									"value": "ea ut ipsum amet officia",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/login?username=ea ut ipsum amet officia&password=ea ut ipsum amet officia",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									],
									"query": [
										{
											"key": "username",
											"value": "ea ut ipsum amet officia",
											"description": "(Required) "
										},
										{
											"key": "password",
											"value": "ea ut ipsum amet officia",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "books",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "title",
							"item": [
								{
									"name": "/books/:id/title Valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 - valid title update\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Book title is updated correctly\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    const expectedTitle = \"New Title\"; \r",
													"\r",
													"    pm.expect(jsonData.title).to.eql(expectedTitle);\r",
													"});\r",
													"\r",
													"pm.test(\"Returned book ID matches newBookId\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"newBookId\"));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"newTitle\": \"New Title\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/books/{{newBookId}}/title",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"books",
												"{{newBookId}}",
												"title"
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"newTitle\": \"aute aliquip nulla\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/books/:id/title",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"books",
														":id",
														"title"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/books/:id/title Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status 400 - invalid title\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message contains 'title'\", () => {\r",
													"    const error = pm.response.json().error.toLowerCase();\r",
													"    pm.expect(error).to.include(\"title\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"newTitle\": \"a\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/books/:id/title",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"books",
												":id",
												"title"
											],
											"variable": [
												{
													"key": "id",
													"value": "44841745",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"newTitle\": \"aute aliquip nulla\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/books/:id/title",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"books",
														":id",
														"title"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "author",
							"item": [
								{
									"name": "/books/:id/author Valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 - valid author update\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Book author is updated correctly\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    const expectedAuthor = \"New Author\"; \r",
													"\r",
													"    pm.expect(jsonData.author).to.eql(expectedAuthor);\r",
													"});\r",
													"\r",
													"pm.test(\"Returned book ID matches newBookId\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"newBookId\"));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"newAuthor\": \"New Author\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/books/{{newBookId}}/author",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"books",
												"{{newBookId}}",
												"author"
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"newAuthor\": \"sit Excepteur sint consectetur eiusmod\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/books/:id/author",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"books",
														":id",
														"author"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/books/:id/author Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status 400 - invalid author\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message contains 'author'\", () => {\r",
													"    const error = pm.response.json().error.toLowerCase();\r",
													"    pm.expect(error).to.include(\"author\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"newAuthor\": \"a\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/books/:id/author",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"books",
												":id",
												"author"
											],
											"variable": [
												{
													"key": "id",
													"value": "44841745",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"newAuthor\": \"sit Excepteur sint consectetur eiusmod\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/books/:id/author",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"books",
														":id",
														"author"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "price",
							"item": [
								{
									"name": "/books/:id/price Valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 - valid price update\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Book price is updated correctly\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    const expectedPrice = 10.00;\r",
													"\r",
													"    pm.expect(jsonData.price).to.eql(expectedPrice);\r",
													"});\r",
													"\r",
													"pm.test(\"Returned book ID matches newBookId\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"newBookId\"));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"newPrice\": 10.00\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/books/{{newBookId}}/price",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"books",
												"{{newBookId}}",
												"price"
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"newPrice\": 57257388.2038894\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/books/:id/price",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"books",
														":id",
														"price"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/books/:id/price Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status 400 - invalid price\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message contains 'price'\", () => {\r",
													"    const error = pm.response.json().error.toLowerCase();\r",
													"    pm.expect(error).to.include(\"price\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt_token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"newPrice\": -10.00\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/books/:id/price",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"books",
												":id",
												"price"
											],
											"variable": [
												{
													"key": "id",
													"value": "44841745",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"newPrice\": 57257388.2038894\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/books/:id/price",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"books",
														":id",
														"price"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/books/:id Valid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200 - Book found\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is JSON\", () => {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct book id\", () => {\r",
											"    const book = pm.response.json();\r",
											"    pm.expect(book.id).to.eql(3); \r",
											"});\r",
											"\r",
											"pm.test(\"Response has title, author, price\", () => {\r",
											"    const book = pm.response.json();\r",
											"    pm.expect(book).to.have.property(\"title\");\r",
											"    pm.expect(book).to.have.property(\"author\");\r",
											"    pm.expect(book).to.have.property(\"price\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/books/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"books",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "3",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/books/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"books",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/books/:id NotFound",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 404 - Not Found\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains error message\", () => {\r",
											"    const res = pm.response.json();\r",
											"    pm.expect(res.toLowerCase()).to.include(\"not found\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/books/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"books",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "-1",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/books/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"books",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/books/:id NewBook",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200 - Book found\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is JSON\", () => {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct book id\", () => {\r",
											"    const book = pm.response.json();\r",
											"    pm.expect(book.id).to.eql(pm.environment.get(\"newBookId\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Response has title, author, price\", () => {\r",
											"    const book = pm.response.json();\r",
											"    pm.expect(book).to.have.property(\"title\");\r",
											"    pm.expect(book).to.have.property(\"author\");\r",
											"    pm.expect(book).to.have.property(\"price\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/books/{{newBookId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"books",
										"{{newBookId}}"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/books/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"books",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/books/:id Valid",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/books/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"books",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/books/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"books",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/books/:id NotFound",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 404 - Not Found\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains 'not found'\", () => {\r",
											"    const text = pm.response.text().toLowerCase();\r",
											"    pm.expect(text).to.include(\"not found\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/books/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"books",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "-1",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/books/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"books",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/books/:id NewBook",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 200 - No Content\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains the deleted book ID\", () => {\r",
											"    const responseText = pm.response.text();\r",
											"    const deletedId = pm.environment.get(\"newBookId\");\r",
											"    pm.expect(responseText).to.include(deletedId);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/books/{{newBookId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"books",
										"{{newBookId}}"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/books/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"books",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "/books NoFilter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/books",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/books?author=ea ut ipsum amet officia&title=ea ut ipsum amet officia&minPrice=-59415880.52479294&maxPrice=-59415880.52479294",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"books"
									],
									"query": [
										{
											"key": "author",
											"value": "ea ut ipsum amet officia"
										},
										{
											"key": "title",
											"value": "ea ut ipsum amet officia"
										},
										{
											"key": "minPrice",
											"value": "-59415880.52479294"
										},
										{
											"key": "maxPrice",
											"value": "-59415880.52479294"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "/books AuthFilter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"All books match author filter (if any)\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    const expectedAuthor = \"King\".toLowerCase();\r",
									"\r",
									"    if (jsonData.length === 0) {\r",
									"        console.warn(\"No books found for the given author filter.\");\r",
									"    } else {\r",
									"        jsonData.forEach(book => {\r",
									"            pm.expect(book.author.toLowerCase()).to.include(expectedAuthor);\r",
									"        });\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books?author=King",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "title",
									"value": "Hobbit",
									"disabled": true
								},
								{
									"key": "minPrice",
									"value": "-59415880.52479294",
									"disabled": true
								},
								{
									"key": "maxPrice",
									"value": "-59415880.52479294",
									"disabled": true
								},
								{
									"key": "author",
									"value": "King"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/books?author=ea ut ipsum amet officia&title=ea ut ipsum amet officia&minPrice=-59415880.52479294&maxPrice=-59415880.52479294",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"books"
									],
									"query": [
										{
											"key": "author",
											"value": "ea ut ipsum amet officia"
										},
										{
											"key": "title",
											"value": "ea ut ipsum amet officia"
										},
										{
											"key": "minPrice",
											"value": "-59415880.52479294"
										},
										{
											"key": "maxPrice",
											"value": "-59415880.52479294"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "/books TitleFilter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"All books match title filter (if any)\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    const expectedTitle = \"Hobbit\".toLowerCase();\r",
									"\r",
									"    if (jsonData.length === 0) {\r",
									"        console.warn(\"No books found for the given title filter.\");\r",
									"    } else {\r",
									"        jsonData.forEach(book => {\r",
									"            pm.expect(book.title.toLowerCase()).to.include(expectedTitle);\r",
									"        });\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books?title=Hobbit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "author",
									"value": "ea ut ipsum amet officia",
									"disabled": true
								},
								{
									"key": "title",
									"value": "Hobbit"
								},
								{
									"key": "minPrice",
									"value": "-59415880.52479294",
									"disabled": true
								},
								{
									"key": "maxPrice",
									"value": "-59415880.52479294",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/books?author=ea ut ipsum amet officia&title=ea ut ipsum amet officia&minPrice=-59415880.52479294&maxPrice=-59415880.52479294",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"books"
									],
									"query": [
										{
											"key": "author",
											"value": "ea ut ipsum amet officia"
										},
										{
											"key": "title",
											"value": "ea ut ipsum amet officia"
										},
										{
											"key": "minPrice",
											"value": "-59415880.52479294"
										},
										{
											"key": "maxPrice",
											"value": "-59415880.52479294"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "/books PriceFilter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"All books have price between 3 and 20 (if any)\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    const min = 3;\r",
									"    const max = 20;\r",
									"\r",
									"    if (jsonData.length === 0) {\r",
									"        console.warn(\"No books found in the given price range.\");\r",
									"    } else {\r",
									"        jsonData.forEach(book => {\r",
									"            pm.expect(book.price).to.be.within(min, max);\r",
									"        });\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books?minPrice=3&maxPrice=20",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "author",
									"value": "ea ut ipsum amet officia",
									"disabled": true
								},
								{
									"key": "title",
									"value": "ea ut ipsum amet officia",
									"disabled": true
								},
								{
									"key": "minPrice",
									"value": "3"
								},
								{
									"key": "maxPrice",
									"value": "20"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/books?author=ea ut ipsum amet officia&title=ea ut ipsum amet officia&minPrice=-59415880.52479294&maxPrice=-59415880.52479294",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"books"
									],
									"query": [
										{
											"key": "author",
											"value": "ea ut ipsum amet officia"
										},
										{
											"key": "title",
											"value": "ea ut ipsum amet officia"
										},
										{
											"key": "minPrice",
											"value": "-59415880.52479294"
										},
										{
											"key": "maxPrice",
											"value": "-59415880.52479294"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "/books Invalid Author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 400 - Invalid Author\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains error mentioning author\", () => {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res).to.have.property(\"error\");\r",
									"    pm.expect(res.error.toLowerCase()).to.include(\"author\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Valid Title\",\n  \"author\": \"A\",\n  \"price\": 15.00\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/books",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"aliquip mollit reprehenderit exercitation\",\n  \"author\": \"elit proident cillum\",\n  \"price\": -6969981.003197163\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/books",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"books"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "/books Invalid Title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 400 - Invalid Title\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains error mentioning title\", () => {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res).to.have.property(\"error\");\r",
									"    pm.expect(res.error.toLowerCase()).to.include(\"title\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"T\",\n  \"author\": \"Valid Author\",\n  \"price\": 15.00\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/books",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"aliquip mollit reprehenderit exercitation\",\n  \"author\": \"elit proident cillum\",\n  \"price\": -6969981.003197163\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/books",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"books"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "/books Invalid Price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 400 - Invalid Price\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains error mentioning price\", () => {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res).to.have.property(\"error\");\r",
									"    pm.expect(res.error.toLowerCase()).to.include(\"price\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Valid Title\",\n  \"author\": \"Valid Author\",\n  \"price\": 0.00\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/books",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"aliquip mollit reprehenderit exercitation\",\n  \"author\": \"elit proident cillum\",\n  \"price\": -6969981.003197163\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/books",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"books"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "/books Valid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status 201 - Created\", () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Response is JSON\", () => {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"Response contains all book fields\", () => {\r",
							"    const book = pm.response.json();\r",
							"    pm.expect(book).to.have.property(\"id\");\r",
							"    pm.expect(book).to.have.property(\"title\");\r",
							"    pm.expect(book).to.have.property(\"author\");\r",
							"    pm.expect(book).to.have.property(\"price\");\r",
							"});\r",
							"const book = pm.response.json();\r",
							"pm.environment.set(\"newBookId\", book.id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"title\": \"Valid Title\",\n  \"author\": \"Valid Author\",\n  \"price\": 15.00\n}",
					"options": {
						"raw": {
							"headerFamily": "json",
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/books",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": [
				{
					"name": "OK",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "<API Key>",
								"description": "Added as a part of security scheme: apikey"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"aliquip mollit reprehenderit exercitation\",\n  \"author\": \"elit proident cillum\",\n  \"price\": -6969981.003197163\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/books",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{apiKey}}",
				"type": "string"
			},
			{
				"key": "in",
				"value": "header",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "/"
		}
	]
}